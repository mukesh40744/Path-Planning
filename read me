The car drives according to the speed limit.
No speed limit red message  seen.

Max Acceleration and Jerk are not Exceeded.
no Max jerk red message seen.

Car does not have collisions.
No collisions.

please see the image(15 miles.png) 

The car stays in its lane, except for the time between changing lanes.
The car stays in its lane most of the time but when it changes lane because of traffic or to return to the center lane.

The car is able to change lanes
The car change lanes when the there is a slow car in front of it, and it is safe to change lanes .

Reflection
Based on the provided code from the seed project, the path planning algorithms start at src/main.cpp line 98 - 268. 

The code consist of three parts:

Prediction line 107 - 142
This part of the code deal with the telemetry and sensor fusion data. It intents to reason about the environment. In the case, we want to know three aspects of it:

Is there a car in front of us blocking the traffic.
Is there a car to the right of us making a lane change not safe.
Is there a car to the left of us making a lane change not safe.
These questions are answered by calculating the lane each other car is and the position it will be at the end of the last plan trajectory. A car is considered "dangerous" when its distance to our car is less than 30 meters in front or behind us.

Behavior line 145-167
This part decides what to do:

If we have a car in front of us, do we change lanes?
Do we speed up or slow down?
Based on the prediction of the situation we are in, this code increases the speed, decrease speed, or make a lane change when it is safe. Instead of increasing the speed at this part of the code, a speed_diff is created to be used for speed changes when generating the trajectory in the last part of the code. This approach makes the car more responsive acting faster to changing situations like a car in front of it trying to apply breaks to cause a collision.

Trajectory line 169-268
This code does the calculation of the trajectory based on the speed and lane output from the behavior, car coordinates and past path points.

First, the last two points of the previous trajectory (or the car position if there are no previous trajectory) are used in conjunction three points at a far distance  to initialize the spline calculation . To make the work less complicated to the spline calculation based on those points, the coordinates are transformed (shift and rotation) to local car coordinates .

In order to ensure more continuity on the trajectory (in addition to adding the last two point of the pass trajectory to the spline adjustment), the pass trajectory points are copied to the new trajectory . The rest of the points are calculated by evaluating the spline and transforming the output coordinates to not local coordinates . Worth noticing the change in the velocity of the car. The speed change is decided on the behavior part of the code, but it is used in that part to increase/decrease speed on every trajectory points instead of doing it for the complete trajectory.